
terminal>mongoimport -d dbname -c collectionName FileName.json

1.Write a MongoDB query to display all the documents in the collection restaurants.


db.restuarant.find().pretty()


2. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine for all
the documents in the collection restaurant.



db.restuarant.find( {} , {name : 1 , restaurant_id : 1 , borough : 1 , cuisine : 1 } ).limit(3)





3. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine, but
exclude the field _id for all the documents in the collection restaurant.




db.restuarant.find( {} , {name : 1 , restaurant_id : 1 , borough : 1 , cuisine : 1 , _id : 1 } ).limit(3)




4. Write a MongoDB query to display the fields restaurant_id, name, borough and zip code, but
exclude the field _id for all the documents in the collection restaurant.


db.restuarant.find( {} , { restaurant_id : 1 , name : 1 , borough : 1 , address : { zipcode : 1} , _id : 0  }  ).pretty()





5. Write a MongoDB query to display all the restaurant which is in the borough Bronx.



db.restuarant.find( {borough : "Bronx"} , {}  ).pretty()


6. Write a MongoDB query to display the first 5 restaurant which is in the borough Bronx.


db.restuarant.find( {borough : "Bronx"} , {}).pretty().limit(5)





7.Write a MongoDB query to display the next 5 restaurants after skipping first 5 which are in the
borough Bronx.


db.restuarant.find( {borough : "Bronx"} , {}  ).pretty().skip(5).limit(5)





8. Write a MongoDB query to find the restaurants who achieved a score more than 90.


db.restuarant.find( { grades: { $elemMatch: { score: { $gt: 90 } } } }, {})




9. Write a MongoDB query to find the restaurants that achieved a score, more than 80 but less than 100



db.restuarant.find(
{ grades : 
	{$elemMatch : 
		{$and : [
			{score : {$gt : 80 }},
			{score : {$lt : 100}} ]
		}
	}
}, 
{} )





